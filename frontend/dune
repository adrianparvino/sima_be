; `melange.emit` is a Dune stanza that will produce build rules to generate
; JavaScript files from sources using the Melange compiler
; https://dune.readthedocs.io/en/stable/melange.html#melange-emit

(melange.emit
 ; The `target` field is used by Dune to put all JavaScript artifacts in a specific folder inside `_build/default`
 ; This field `target` allows to have multiple `melange.emit` stanzas in the `dune` file
 ; if, for example, we want to produce ES6 and CommonJS output from the same sources.
 (target output)
 ; Here's the list of dependencies of the stanza. In this case (being `melange.emit`),
 ; Dune will look into those dependencies and generate rules with JavaScript targets
 ; for the modules in those libraries as well.
 ; Caveat: the libraries need to be specified with `(modes melange)`.
 (libraries reason-react melange.belt melange-fetch melange-json)
 ; By default, Dune will include all modules in the folder to the targets. With `modules` field
 ; we can tweak this default behavior by excluding `hello` from the list of targets of this stanza.
 ; See https://dune.readthedocs.io/en/stable/reference/predicate-language.html#predicate-language
 (modules :standard)
 ; Uncomment the following to copy the generated JavaScript files inside the source tree
 ; (promote (until-clean))
 (preprocess
  ; The `pps` field is a list of ppx to apply to the sources before generating JavaScript. melange.ppx allows to use Melange attributes [@mel. ...] (https://melange.re/v2.0.0/communicate-with-javascript/#attributes)
  ; reason-react-ppx allows to use JSX for ReasonReact components by using the [@JSX] attributes from Reason: https://reasonml.github.io/docs/en/jsx
  (pps melange.ppx melange-json.ppx reason-react-ppx))
 ; module_systems is a list of module systems to generate code for (es6, commonjs)
 ; Change to (module_systems es6 commonjs) if you want to generate both
 ; https://melange.re/v2.0.0/build-system/#commonjs-or-es6-modules
 (module_systems es6))

(rule
 (target dist)
 (enabled_if
  (<> %{profile} "production"))
 (deps
  (alias melange)
  (file index.css)
  (file index.html)
  (file ../.env)
  (file ../farm.config.ts)
  (file ../postcss.config.mjs)
  (file ../tailwind.config.js))
 (action
  (progn
   (run cp index.html output/frontend/)
   (run cp index.css output/frontend/)
   (run cp ../.env output/)
   (run cp ../farm.config.ts output/)
   (run cp ../postcss.config.mjs output/)
   (run cp ../tailwind.config.js output/)
   (chdir
    output
    (run farm build -i frontend/index.html -o ../dist)))))

(rule
 (target dist)
 (enabled_if
  (= %{profile} "production"))
 (deps
  (alias melange)
  (file index.css)
  (file index.html)
  (file ../.env)
  (file ../farm.config.ts)
  (file ../postcss.config.mjs)
  (file ../tailwind.config.js))
 (action
  (progn
   (run cp index.html output/frontend/)
   (run cp index.css output/frontend/)
   (run cp ../.env output/)
   (run cp ../farm.config.ts output/)
   (run cp ../postcss.config.mjs output/)
   (run cp ../tailwind.config.js output/)
   (chdir
    output
    (run farm build -m production -i frontend/index.html -o ../dist)))))
